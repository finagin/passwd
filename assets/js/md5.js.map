{"version":3,"sources":["md5.js"],"names":["$","safeAdd","x","y","lsw","bitRotateLeft","num","cnt","md5cmn","q","a","b","s","t","md5ff","c","d","md5gg","md5hh","md5ii","binlMD5","len","i","olda","oldb","oldc","oldd","length","binl2rstr","input","output","length32","String","fromCharCode","rstr2binl","undefined","length8","charCodeAt","rstrMD5","rstrHMACMD5","key","data","hash","bkey","ipad","opad","concat","rstr2hex","hexTab","charAt","str2rstrUTF8","unescape","encodeURIComponent","rawMD5","hexMD5","rawHMACMD5","k","hexHMACMD5","md5","string","raw","define","amd","module","exports","this"],"mappings":"CAqBE,SAAUA,GACR,YAMA,SAASC,GAASC,EAAGC,GACjB,GAAIC,IAAW,MAAJF,IAAmB,MAAJC,EAE1B,QADWD,GAAK,KAAOC,GAAK,KAAOC,GAAO,KAC3B,GAAa,MAANA,EAM1B,QAASC,GAAeC,EAAKC,GACzB,MAAQD,IAAOC,EAAQD,IAAS,GAAKC,EAMzC,QAASC,GAAQC,EAAGC,EAAGC,EAAGT,EAAGU,EAAGC,GAC5B,MAAOZ,GAAQI,EAAcJ,EAAQA,EAAQS,EAAGD,GAAIR,EAAQC,EAAGW,IAAKD,GAAID,GAE5E,QAASG,GAAOJ,EAAGC,EAAGI,EAAGC,EAAGd,EAAGU,EAAGC,GAC9B,MAAOL,GAAQG,EAAII,GAAQJ,EAAKK,EAAIN,EAAGC,EAAGT,EAAGU,EAAGC,GAEpD,QAASI,GAAOP,EAAGC,EAAGI,EAAGC,EAAGd,EAAGU,EAAGC,GAC9B,MAAOL,GAAQG,EAAIK,EAAMD,GAAMC,EAAKN,EAAGC,EAAGT,EAAGU,EAAGC,GAEpD,QAASK,GAAOR,EAAGC,EAAGI,EAAGC,EAAGd,EAAGU,EAAGC,GAC9B,MAAOL,GAAOG,EAAII,EAAIC,EAAGN,EAAGC,EAAGT,EAAGU,EAAGC,GAEzC,QAASM,GAAOT,EAAGC,EAAGI,EAAGC,EAAGd,EAAGU,EAAGC,GAC9B,MAAOL,GAAOO,GAAKJ,GAAMK,GAAKN,EAAGC,EAAGT,EAAGU,EAAGC,GAM9C,QAASO,GAASlB,EAAGmB,GAEjBnB,EAAEmB,GAAO,IAAM,KAASA,EAAM,GAC9BnB,EAA8B,IAAzBmB,EAAM,KAAQ,GAAM,IAAWA,CAEpC,IAAIC,GACAC,EACAC,EACAC,EACAC,EACAhB,EAAI,WACJC,GAAK,UACLI,GAAK,WACLC,EAAI,SAER,KAAKM,EAAI,EAAGA,EAAIpB,EAAEyB,OAAQL,GAAK,GAC3BC,EAAOb,EACPc,EAAOb,EACPc,EAAOV,EACPW,EAAOV,EAEPN,EAAII,EAAMJ,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,GAAI,GAAI,WAChCN,EAAIF,EAAME,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,GAAI,IAAK,WACrCP,EAAID,EAAMC,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,GAAI,GAAI,WACpCX,EAAIG,EAAMH,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,GAAI,IAAK,YACrCZ,EAAII,EAAMJ,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,GAAI,GAAI,WACpCN,EAAIF,EAAME,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,GAAI,GAAI,YACpCP,EAAID,EAAMC,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,GAAI,IAAK,YACrCX,EAAIG,EAAMH,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,GAAI,IAAK,UACrCZ,EAAII,EAAMJ,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,GAAI,EAAG,YACnCN,EAAIF,EAAME,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,GAAI,IAAK,YACrCP,EAAID,EAAMC,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,IAAK,IAAK,OACtCX,EAAIG,EAAMH,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,IAAK,IAAK,YACtCZ,EAAII,EAAMJ,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,IAAK,EAAG,YACpCN,EAAIF,EAAME,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,IAAK,IAAK,UACtCP,EAAID,EAAMC,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,IAAK,IAAK,YACtCX,EAAIG,EAAMH,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,IAAK,GAAI,YAErCZ,EAAIO,EAAMP,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,GAAI,GAAI,WACpCN,EAAIC,EAAMD,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,GAAI,GAAI,YACpCP,EAAIE,EAAMF,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,IAAK,GAAI,WACrCX,EAAIM,EAAMN,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,GAAI,IAAK,WACjCZ,EAAIO,EAAMP,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,GAAI,GAAI,WACpCN,EAAIC,EAAMD,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,IAAK,EAAG,UACpCP,EAAIE,EAAMF,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,IAAK,IAAK,WACtCX,EAAIM,EAAMN,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,GAAI,IAAK,WACrCZ,EAAIO,EAAMP,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,GAAI,EAAG,WACnCN,EAAIC,EAAMD,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,IAAK,GAAI,YACrCP,EAAIE,EAAMF,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,GAAI,IAAK,WACrCX,EAAIM,EAAMN,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,GAAI,GAAI,YACpCZ,EAAIO,EAAMP,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,IAAK,GAAI,YACrCN,EAAIC,EAAMD,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,GAAI,GAAI,UACpCP,EAAIE,EAAMF,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,GAAI,GAAI,YACpCX,EAAIM,EAAMN,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,IAAK,IAAK,YAEtCZ,EAAIQ,EAAMR,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,GAAI,GAAI,QACpCN,EAAIE,EAAMF,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,GAAI,IAAK,YACrCP,EAAIG,EAAMH,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,IAAK,GAAI,YACrCX,EAAIO,EAAMP,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,IAAK,IAAK,UACtCZ,EAAIQ,EAAMR,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,GAAI,GAAI,YACpCN,EAAIE,EAAMF,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,GAAI,GAAI,YACpCP,EAAIG,EAAMH,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,GAAI,IAAK,WACrCX,EAAIO,EAAMP,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,IAAK,IAAK,YACtCZ,EAAIQ,EAAMR,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,IAAK,EAAG,WACpCN,EAAIE,EAAMF,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,GAAI,IAAK,WACjCP,EAAIG,EAAMH,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,GAAI,IAAK,WACrCX,EAAIO,EAAMP,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,GAAI,GAAI,UACpCZ,EAAIQ,EAAMR,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,GAAI,GAAI,WACpCN,EAAIE,EAAMF,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,IAAK,IAAK,WACtCP,EAAIG,EAAMH,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,IAAK,GAAI,WACrCX,EAAIO,EAAMP,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,GAAI,IAAK,WAErCZ,EAAIS,EAAMT,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,GAAI,GAAI,WAChCN,EAAIG,EAAMH,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,GAAI,GAAI,YACpCP,EAAII,EAAMJ,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,IAAK,IAAK,YACtCX,EAAIQ,EAAMR,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,GAAI,IAAK,UACrCZ,EAAIS,EAAMT,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,IAAK,EAAG,YACpCN,EAAIG,EAAMH,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,GAAI,IAAK,YACrCP,EAAII,EAAMJ,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,IAAK,IAAK,SACtCX,EAAIQ,EAAMR,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,GAAI,IAAK,YACrCZ,EAAIS,EAAMT,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,GAAI,EAAG,YACnCN,EAAIG,EAAMH,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,IAAK,IAAK,UACtCP,EAAII,EAAMJ,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,GAAI,IAAK,YACrCX,EAAIQ,EAAMR,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,IAAK,GAAI,YACrCZ,EAAIS,EAAMT,EAAGC,EAAGI,EAAGC,EAAGd,EAAEoB,EAAI,GAAI,GAAI,WACpCN,EAAIG,EAAMH,EAAGN,EAAGC,EAAGI,EAAGb,EAAEoB,EAAI,IAAK,IAAK,YACtCP,EAAII,EAAMJ,EAAGC,EAAGN,EAAGC,EAAGT,EAAEoB,EAAI,GAAI,GAAI,WACpCX,EAAIQ,EAAMR,EAAGI,EAAGC,EAAGN,EAAGR,EAAEoB,EAAI,GAAI,IAAK,WAErCZ,EAAIT,EAAQS,EAAGa,GACfZ,EAAIV,EAAQU,EAAGa,GACfT,EAAId,EAAQc,EAAGU,GACfT,EAAIf,EAAQe,EAAGU,EAEnB,QAAQhB,EAAGC,EAAGI,EAAGC,GAMrB,QAASY,GAAWC,GAChB,GAAIP,GACAQ,EAAS,GACTC,EAA0B,GAAfF,EAAMF,MACrB,KAAKL,EAAI,EAAGA,EAAIS,EAAUT,GAAK,EAC3BQ,GAAUE,OAAOC,aAAcJ,EAAMP,GAAK,KAAQA,EAAI,GAAO,IAEjE,OAAOQ,GAOX,QAASI,GAAWL,GAChB,GAAIP,GACAQ,IAEJ,KADAA,GAAQD,EAAMF,QAAU,GAAK,OAAKQ,GAC7Bb,EAAI,EAAGA,EAAIQ,EAAOH,OAAQL,GAAK,EAChCQ,EAAOR,GAAK,CAEhB,IAAIc,GAAyB,EAAfP,EAAMF,MACpB,KAAKL,EAAI,EAAGA,EAAIc,EAASd,GAAK,EAC1BQ,EAAOR,GAAK,KAAiC,IAA1BO,EAAMQ,WAAWf,EAAI,KAAeA,EAAI,EAE/D,OAAOQ,GAMX,QAASQ,GAAS1B,GACd,MAAOgB,GAAUR,EAAQc,EAAUtB,GAAe,EAAXA,EAAEe,SAM7C,QAASY,GAAaC,EAAKC,GACvB,GAAInB,GAIAoB,EAHAC,EAAOT,EAAUM,GACjBI,KACAC,IAMJ,KAJAD,EAAK,IAAMC,EAAK,QAAMV,GAClBQ,EAAKhB,OAAS,KACdgB,EAAOvB,EAAQuB,EAAmB,EAAbH,EAAIb,SAExBL,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACrBsB,EAAKtB,GAAe,UAAVqB,EAAKrB,GACfuB,EAAKvB,GAAe,WAAVqB,EAAKrB,EAGnB,OADAoB,GAAOtB,EAAQwB,EAAKE,OAAOZ,EAAUO,IAAQ,IAAoB,EAAdA,EAAKd,QACjDC,EAAUR,EAAQyB,EAAKC,OAAOJ,GAAO,MAMhD,QAASK,GAAUlB,GACf,GAEI3B,GACAoB,EAHA0B,EAAS,mBACTlB,EAAS,EAGb,KAAKR,EAAI,EAAGA,EAAIO,EAAMF,OAAQL,GAAK,EAC/BpB,EAAI2B,EAAMQ,WAAWf,GACrBQ,GAAUkB,EAAOC,OAAQ/C,IAAM,EAAK,IAChC8C,EAAOC,OAAW,GAAJ/C,EAEtB,OAAO4B,GAMX,QAASoB,GAAcrB,GACnB,MAAOsB,UAASC,mBAAmBvB,IAMvC,QAASwB,GAAQzC,GACb,MAAO0B,GAAQY,EAAatC,IAEhC,QAAS0C,GAAQ1C,GACb,MAAOmC,GAASM,EAAOzC,IAE3B,QAAS2C,GAAYC,EAAGxC,GACpB,MAAOuB,GAAYW,EAAaM,GAAIN,EAAalC,IAErD,QAASyC,GAAYD,EAAGxC,GACpB,MAAO+B,GAASQ,EAAWC,EAAGxC,IAGlC,QAAS0C,GAAKC,EAAQnB,EAAKoB,GACvB,MAAKpB,GAMAoB,EAGEL,EAAWf,EAAKmB,GAFZF,EAAWjB,EAAKmB,GANlBC,EAGEP,EAAOM,GAFHL,EAAOK,GAUJ,kBAAXE,SAAyBA,OAAOC,IACvCD,OAAO,WACH,MAAOH,KAEc,gBAAXK,SAAuBA,OAAOC,QAC5CD,OAAOC,QAAUN,EAEjB1D,EAAE0D,IAAMA,GAEdO","file":"md5.js","sourcesContent":["/*\n * JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n\n/* global define */\n\n;(function ($) {\n    'use strict'\n\n    /*\n     * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n     * to work around bugs in some JS interpreters.\n     */\n    function safeAdd (x, y) {\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF)\n        var msw = (x >> 16) + (y >> 16) + (lsw >> 16)\n        return (msw << 16) | (lsw & 0xFFFF)\n    }\n\n    /*\n     * Bitwise rotate a 32-bit number to the left.\n     */\n    function bitRotateLeft (num, cnt) {\n        return (num << cnt) | (num >>> (32 - cnt))\n    }\n\n    /*\n     * These functions implement the four basic operations the algorithm uses.\n     */\n    function md5cmn (q, a, b, x, s, t) {\n        return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b)\n    }\n    function md5ff (a, b, c, d, x, s, t) {\n        return md5cmn((b & c) | ((~b) & d), a, b, x, s, t)\n    }\n    function md5gg (a, b, c, d, x, s, t) {\n        return md5cmn((b & d) | (c & (~d)), a, b, x, s, t)\n    }\n    function md5hh (a, b, c, d, x, s, t) {\n        return md5cmn(b ^ c ^ d, a, b, x, s, t)\n    }\n    function md5ii (a, b, c, d, x, s, t) {\n        return md5cmn(c ^ (b | (~d)), a, b, x, s, t)\n    }\n\n    /*\n     * Calculate the MD5 of an array of little-endian words, and a bit length.\n     */\n    function binlMD5 (x, len) {\n        /* append padding */\n        x[len >> 5] |= 0x80 << (len % 32)\n        x[(((len + 64) >>> 9) << 4) + 14] = len\n\n        var i\n        var olda\n        var oldb\n        var oldc\n        var oldd\n        var a = 1732584193\n        var b = -271733879\n        var c = -1732584194\n        var d = 271733878\n\n        for (i = 0; i < x.length; i += 16) {\n            olda = a\n            oldb = b\n            oldc = c\n            oldd = d\n\n            a = md5ff(a, b, c, d, x[i], 7, -680876936)\n            d = md5ff(d, a, b, c, x[i + 1], 12, -389564586)\n            c = md5ff(c, d, a, b, x[i + 2], 17, 606105819)\n            b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330)\n            a = md5ff(a, b, c, d, x[i + 4], 7, -176418897)\n            d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426)\n            c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341)\n            b = md5ff(b, c, d, a, x[i + 7], 22, -45705983)\n            a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416)\n            d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417)\n            c = md5ff(c, d, a, b, x[i + 10], 17, -42063)\n            b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162)\n            a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682)\n            d = md5ff(d, a, b, c, x[i + 13], 12, -40341101)\n            c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290)\n            b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329)\n\n            a = md5gg(a, b, c, d, x[i + 1], 5, -165796510)\n            d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632)\n            c = md5gg(c, d, a, b, x[i + 11], 14, 643717713)\n            b = md5gg(b, c, d, a, x[i], 20, -373897302)\n            a = md5gg(a, b, c, d, x[i + 5], 5, -701558691)\n            d = md5gg(d, a, b, c, x[i + 10], 9, 38016083)\n            c = md5gg(c, d, a, b, x[i + 15], 14, -660478335)\n            b = md5gg(b, c, d, a, x[i + 4], 20, -405537848)\n            a = md5gg(a, b, c, d, x[i + 9], 5, 568446438)\n            d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690)\n            c = md5gg(c, d, a, b, x[i + 3], 14, -187363961)\n            b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501)\n            a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467)\n            d = md5gg(d, a, b, c, x[i + 2], 9, -51403784)\n            c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473)\n            b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734)\n\n            a = md5hh(a, b, c, d, x[i + 5], 4, -378558)\n            d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463)\n            c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562)\n            b = md5hh(b, c, d, a, x[i + 14], 23, -35309556)\n            a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060)\n            d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353)\n            c = md5hh(c, d, a, b, x[i + 7], 16, -155497632)\n            b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640)\n            a = md5hh(a, b, c, d, x[i + 13], 4, 681279174)\n            d = md5hh(d, a, b, c, x[i], 11, -358537222)\n            c = md5hh(c, d, a, b, x[i + 3], 16, -722521979)\n            b = md5hh(b, c, d, a, x[i + 6], 23, 76029189)\n            a = md5hh(a, b, c, d, x[i + 9], 4, -640364487)\n            d = md5hh(d, a, b, c, x[i + 12], 11, -421815835)\n            c = md5hh(c, d, a, b, x[i + 15], 16, 530742520)\n            b = md5hh(b, c, d, a, x[i + 2], 23, -995338651)\n\n            a = md5ii(a, b, c, d, x[i], 6, -198630844)\n            d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415)\n            c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905)\n            b = md5ii(b, c, d, a, x[i + 5], 21, -57434055)\n            a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571)\n            d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606)\n            c = md5ii(c, d, a, b, x[i + 10], 15, -1051523)\n            b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799)\n            a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359)\n            d = md5ii(d, a, b, c, x[i + 15], 10, -30611744)\n            c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380)\n            b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649)\n            a = md5ii(a, b, c, d, x[i + 4], 6, -145523070)\n            d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379)\n            c = md5ii(c, d, a, b, x[i + 2], 15, 718787259)\n            b = md5ii(b, c, d, a, x[i + 9], 21, -343485551)\n\n            a = safeAdd(a, olda)\n            b = safeAdd(b, oldb)\n            c = safeAdd(c, oldc)\n            d = safeAdd(d, oldd)\n        }\n        return [a, b, c, d]\n    }\n\n    /*\n     * Convert an array of little-endian words to a string\n     */\n    function binl2rstr (input) {\n        var i\n        var output = ''\n        var length32 = input.length * 32\n        for (i = 0; i < length32; i += 8) {\n            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF)\n        }\n        return output\n    }\n\n    /*\n     * Convert a raw string to an array of little-endian words\n     * Characters >255 have their high-byte silently ignored.\n     */\n    function rstr2binl (input) {\n        var i\n        var output = []\n        output[(input.length >> 2) - 1] = undefined\n        for (i = 0; i < output.length; i += 1) {\n            output[i] = 0\n        }\n        var length8 = input.length * 8\n        for (i = 0; i < length8; i += 8) {\n            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32)\n        }\n        return output\n    }\n\n    /*\n     * Calculate the MD5 of a raw string\n     */\n    function rstrMD5 (s) {\n        return binl2rstr(binlMD5(rstr2binl(s), s.length * 8))\n    }\n\n    /*\n     * Calculate the HMAC-MD5, of a key and some data (raw strings)\n     */\n    function rstrHMACMD5 (key, data) {\n        var i\n        var bkey = rstr2binl(key)\n        var ipad = []\n        var opad = []\n        var hash\n        ipad[15] = opad[15] = undefined\n        if (bkey.length > 16) {\n            bkey = binlMD5(bkey, key.length * 8)\n        }\n        for (i = 0; i < 16; i += 1) {\n            ipad[i] = bkey[i] ^ 0x36363636\n            opad[i] = bkey[i] ^ 0x5C5C5C5C\n        }\n        hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8)\n        return binl2rstr(binlMD5(opad.concat(hash), 512 + 128))\n    }\n\n    /*\n     * Convert a raw string to a hex string\n     */\n    function rstr2hex (input) {\n        var hexTab = '0123456789abcdef'\n        var output = ''\n        var x\n        var i\n        for (i = 0; i < input.length; i += 1) {\n            x = input.charCodeAt(i)\n            output += hexTab.charAt((x >>> 4) & 0x0F) +\n                hexTab.charAt(x & 0x0F)\n        }\n        return output\n    }\n\n    /*\n     * Encode a string as utf-8\n     */\n    function str2rstrUTF8 (input) {\n        return unescape(encodeURIComponent(input))\n    }\n\n    /*\n     * Take string arguments and return either raw or hex encoded strings\n     */\n    function rawMD5 (s) {\n        return rstrMD5(str2rstrUTF8(s))\n    }\n    function hexMD5 (s) {\n        return rstr2hex(rawMD5(s))\n    }\n    function rawHMACMD5 (k, d) {\n        return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d))\n    }\n    function hexHMACMD5 (k, d) {\n        return rstr2hex(rawHMACMD5(k, d))\n    }\n\n    function md5 (string, key, raw) {\n        if (!key) {\n            if (!raw) {\n                return hexMD5(string)\n            }\n            return rawMD5(string)\n        }\n        if (!raw) {\n            return hexHMACMD5(key, string)\n        }\n        return rawHMACMD5(key, string)\n    }\n\n    if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return md5\n        })\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = md5\n    } else {\n        $.md5 = md5\n    }\n}(this))"]}